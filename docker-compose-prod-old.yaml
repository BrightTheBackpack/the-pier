services:
  reverse-proxy:
    command:
      # Entry points
      - --entryPoints.web.address=:80
      - --entrypoints.web.http.redirections.entryPoint.to=websecure
      - --entrypoints.web.http.redirections.entryPoint.scheme=https
      - --entryPoints.websecure.address=:443
      - --entryPoints.grpc.address=:50051
      # HTTP challenge
      - --certificatesresolvers.myresolver.acme.email=${ACME_EMAIL}
      - --certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json
      - --certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web
      # Let's Encrypt's staging server
      # uncomment during testing to avoid rate limiting
      #- --certificatesresolvers.dnsresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory
    ports:
      - "${HTTP_PORT}:80"
      - "${HTTPS_PORT}:443"
      - "${GRPC_PORT}:50051"
    volumes:
      - ${DATA_DIR}/letsencrypt/:/letsencrypt/
    restart: ${RESTART_POLICY}
    labels:
      - "traefik.http.routers.redirect-router.entrypoints=websecure"
      - "traefik.http.routers.redirect-router.rule=Host(`the-pier.hackclub.com`)"
      - "traefik.http.routers.redirect-router.middlewares=redirect-regex"
      - "traefik.http.middlewares.redirect-regex.redirectregex.regex=^https://the-pier\\.hackclub\\.com(/.*)?$"
      - "traefik.http.middlewares.redirect-regex.redirectregex.replacement=https://pier.hackclub.com"
      - "traefik.http.middlewares.redirect-regex.redirectregex.permanent=true"

  play:
    image: thecodingmachine/workadventure-play:${VERSION}
    environment:
      PUSHER_URL: "https://${DOMAIN}/"
      ICON_URL: "/icon"
      FRONT_URL: "/"
      PUBLIC_MAP_STORAGE_URL: "https://${DOMAIN}/map-storage"
      OPID_PROMPT: "login"
      UPLOADER_URL: "/uploader"
    labels:
      - traefik.enable=true

      - traefik.http.routers.play.rule=Host(`${DOMAIN}`) && PathPrefix(`/`)
      - traefik.http.routers.play.entryPoints=web
      - traefik.http.services.play.loadbalancer.server.port=3000

      - traefik.http.routers.play-ssl.rule=Host(`${DOMAIN}`) && PathPrefix(`/`)
      - traefik.http.routers.play-ssl.entryPoints=websecure
      - traefik.http.routers.play-ssl.tls=true
      - traefik.http.routers.play-ssl.tls.certresolver=myresolver
      - traefik.http.routers.play-ssl.service=play

      - traefik.http.routers.play-ws.rule=Host(`${DOMAIN}`) && PathPrefix(`/ws/`)
      - traefik.http.routers.play-ws.entryPoints=web
      - traefik.http.services.play-ws.loadbalancer.server.port=3001

      - traefik.http.routers.play-ws-ssl.rule=Host(`${DOMAIN}`) && PathPrefix(`/ws/`)
      - traefik.http.routers.play-ws-ssl.entryPoints=websecure
      - traefik.http.routers.play-ws-ssl.tls=true
      - traefik.http.routers.play-ws-ssl.tls.certresolver=myresolver
      - traefik.http.routers.play-ws-ssl.service=play-ws

      - traefik.http.routers.room-api.rule=Host(`${DOMAIN}`)
      - traefik.http.routers.room-api.entryPoints=grpc
      - traefik.http.routers.room-api.service=room-api
      - traefik.http.services.room-api.loadbalancer.server.port=50051
      - traefik.http.services.room-api.loadbalancer.server.scheme=h2c
      - traefik.http.routers.room-api.tls=true
      - traefik.http.routers.room-api.tls.certresolver=myresolver

  back:
    image: thecodingmachine/workadventure-back:${VERSION}
    environment:
      PLAY_URL: "https://${DOMAIN}"
      PUBLIC_MAP_STORAGE_URL: "https://${DOMAIN}/map-storage"
    labels:
      - traefik.enable=true
      - traefik.http.middlewares.strip-api-prefix.stripprefix.prefixes=/api
      - traefik.http.routers.back.rule=Host(`${DOMAIN}`) && PathPrefix(`/api`)
      - traefik.http.routers.back.middlewares=strip-api-prefix@docker
      - traefik.http.routers.back.entryPoints=web
      - traefik.http.services.back.loadbalancer.server.port=8080
      - traefik.http.routers.back-ssl.middlewares=strip-api-prefix@docker
      - traefik.http.routers.back-ssl.rule=Host(`${DOMAIN}`) && PathPrefix(`/api`)
      - traefik.http.routers.back-ssl.entryPoints=websecure
      - traefik.http.routers.back-ssl.service=back
      - traefik.http.routers.back-ssl.tls=true
      - traefik.http.routers.back-ssl.tls.certresolver=myresolver

  map-storage:
    image: thecodingmachine/workadventure-map-storage:${VERSION}
    environment:
      PATH_PREFIX: "/map-storage"
      ENTITY_COLLECTION_URLS: "https://${DOMAIN}/collections/FurnitureCollection.json,https://${DOMAIN}/collections/OfficeCollection.json"
      MAP_STORAGE_API_TOKEN: "${MAP_STORAGE_API_TOKEN:-${SECRET_KEY}}"
      PUSHER_URL: "https://${DOMAIN}/"
    volumes:
      - map-storage-data:/maps
    labels:
      - traefik.enable=true
      - traefik.http.middlewares.strip-map-storage-prefix.stripprefix.prefixes=/map-storage
      - traefik.http.routers.map-storage.middlewares=strip-map-storage-prefix@docker
      - traefik.http.routers.map-storage.rule=Host(`${DOMAIN}`) && PathPrefix(`/map-storage`)
      - traefik.http.routers.map-storage.entryPoints=web
      - traefik.http.services.map-storage.loadbalancer.server.port=3000
      - traefik.http.routers.map-storage-ssl.middlewares=strip-map-storage-prefix@docker
      - traefik.http.routers.map-storage-ssl.rule=Host(`${DOMAIN}`) && PathPrefix(`/map-storage`)
      - traefik.http.routers.map-storage-ssl.entryPoints=websecure
      - traefik.http.routers.map-storage-ssl.service=map-storage
      - traefik.http.routers.map-storage-ssl.tls=true
      - traefik.http.routers.map-storage-ssl.tls.certresolver=myresolver

  uploader:
    image: thecodingmachine/workadventure-uploader:${VERSION}
    environment:
      UPLOADER_URL: "https://${DOMAIN}/uploader"
    labels:
      - traefik.enable=true
      - traefik.http.middlewares.strip-uploader-prefix.stripprefix.prefixes=/uploader
      - traefik.http.routers.uploader.rule=Host(`${DOMAIN}`) && PathPrefix(`/uploader`)
      - traefik.http.routers.uploader.middlewares=strip-uploader-prefix@docker
      - traefik.http.routers.uploader.entryPoints=web
      - traefik.http.services.uploader.loadbalancer.server.port=8080
      - traefik.http.routers.uploader-ssl.middlewares=strip-uploader-prefix@docker
      - traefik.http.routers.uploader-ssl.rule=Host(`${DOMAIN}`) && PathPrefix(`/uploader`)
      - traefik.http.routers.uploader-ssl.entryPoints=websecure
      - traefik.http.routers.uploader-ssl.service=uploader
      - traefik.http.routers.uploader-ssl.tls=true
      - traefik.http.routers.uploader-ssl.tls.certresolver=myresolver

  redis:
    volumes:
      - redisdata:/data

  icon:
    labels:
      - traefik.enable=true
      - traefik.http.middlewares.strip-icon-prefix.stripprefix.prefixes=/icon
      - traefik.http.routers.icon.middlewares=strip-icon-prefix@docker
      - traefik.http.routers.icon.rule=Host(`${DOMAIN}`) && PathPrefix(`/icon`)
      - traefik.http.routers.icon.entryPoints=web
      - traefik.http.services.icon.loadbalancer.server.port=8080
      - traefik.http.routers.icon-ssl.middlewares=strip-icon-prefix@docker
      - traefik.http.routers.icon-ssl.rule=Host(`${DOMAIN}`) && PathPrefix(`/icon`)
      - traefik.http.routers.icon-ssl.entryPoints=websecure
      - traefik.http.routers.icon-ssl.service=icon
      - traefik.http.routers.icon-ssl.tls=true
      - traefik.http.routers.icon-ssl.tls.certresolver=myresolver

volumes:
  redisdata:
  map-storage-data:
